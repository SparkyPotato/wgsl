use std::fmt::Display;

use crate::text::{Interner, Text};

#[derive(Copy, Clone, Eq, PartialEq, Debug, Hash)]
pub enum InbuiltFunction {
	Bitcast,
	All,
	Any,
	Select,
	ArrayLength,
	Abs,
	Acos,
	Acosh,
	Asin,
	Asinh,
	Atan,
	Atanh,
	Atan2,
	Ceil,
	Clamp,
	Cos,
	Cosh,
	CountLeadingZeros,
	CountOneBits,
	CountTrailingZeros,
	Cross,
	Degrees,
	Determinant,
	Distance,
	Dot,
	Exp,
	Exp2,
	ExtractBits,
	FaceForward,
	FirstLeadingBit,
	FirstTrailingBit,
	Floor,
	Fma,
	Fract,
	Frexp,
	InsertBits,
	InverseSqrt,
	Ldexp,
	Length,
	Log,
	Log2,
	Max,
	Min,
	Mix,
	Modf,
	Normalize,
	Pow,
	QuantizeToF16,
	Radians,
	Reflect,
	Refract,
	ReverseBits,
	Round,
	Saturate,
	Sign,
	Sin,
	Sinh,
	Smoothstep,
	Sqrt,
	Step,
	Tan,
	Tanh,
	Transpose,
	Trunc,
	Dpdx,
	DpdxCoarse,
	DpdxFine,
	Dpdy,
	DpdyCoarse,
	DpdyFine,
	Fwidth,
	FwidthCoarse,
	FwidthFine,
	TextureDimensions,
	TextureGather,
	TextureGatherCompare,
	TextureLoad,
	TextureNumLayers,
	TextuerNumLevels,
	TextureNumSamples,
	TextureSample,
	TextureSampleBias,
	TextureSampleCompare,
	TextureSampleCompareLevel,
	TextureSampleGrad,
	TextureSampleLevel,
	TextureSampleBaseClampToEdge,
	TextureStore,
	AtomicLoad,
	AtomicStore,
	AtomicAdd,
	AtomicSub,
	AtomicMax,
	AtomicMin,
	AtomicAnd,
	AtomicOr,
	AtomicXor,
	AtomicExchange,
	AtomicCompareExchangeWeak,
	Pack4x8Snorm,
	Pack4x8Unorm,
	Pack2x16Snorm,
	Pack2x16Unorm,
	Pack2x16Float,
	Unpack4x8Snorm,
	Unpack4x8Unorm,
	Unpack2x16Snorm,
	Unpack2x16Unorm,
	Unpack2x16Float,
	StorageBarrier,
	WorkgroupBarrier,
}

impl Display for InbuiltFunction {
	fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
		match self {
			InbuiltFunction::Bitcast => write!(f, "bitcast"),
			InbuiltFunction::All => write!(f, "all"),
			InbuiltFunction::Any => write!(f, "any"),
			InbuiltFunction::Select => write!(f, "select"),
			InbuiltFunction::ArrayLength => write!(f, "arrayLength"),
			InbuiltFunction::Abs => write!(f, "abs"),
			InbuiltFunction::Acos => write!(f, "acos"),
			InbuiltFunction::Acosh => write!(f, "acosh"),
			InbuiltFunction::Asin => write!(f, "asin"),
			InbuiltFunction::Asinh => write!(f, "asinh"),
			InbuiltFunction::Atan => write!(f, "atan"),
			InbuiltFunction::Atanh => write!(f, "atanh"),
			InbuiltFunction::Atan2 => write!(f, "atan2"),
			InbuiltFunction::Ceil => write!(f, "ceil"),
			InbuiltFunction::Clamp => write!(f, "clamp"),
			InbuiltFunction::Cos => write!(f, "cos"),
			InbuiltFunction::Cosh => write!(f, "cosh"),
			InbuiltFunction::CountLeadingZeros => write!(f, "countLeadingZeros"),
			InbuiltFunction::CountOneBits => write!(f, "countOneBits"),
			InbuiltFunction::CountTrailingZeros => write!(f, "countTrailingZeros"),
			InbuiltFunction::Cross => write!(f, "cross"),
			InbuiltFunction::Degrees => write!(f, "degrees"),
			InbuiltFunction::Determinant => write!(f, "determinant"),
			InbuiltFunction::Distance => write!(f, "distance"),
			InbuiltFunction::Dot => write!(f, "dot"),
			InbuiltFunction::Exp => write!(f, "exp"),
			InbuiltFunction::Exp2 => write!(f, "exp2"),
			InbuiltFunction::ExtractBits => write!(f, "extractBits"),
			InbuiltFunction::FaceForward => write!(f, "faceForward"),
			InbuiltFunction::FirstLeadingBit => write!(f, "firstLeadingBit"),
			InbuiltFunction::FirstTrailingBit => write!(f, "firstTrailingBit"),
			InbuiltFunction::Floor => write!(f, "floor"),
			InbuiltFunction::Fma => write!(f, "fma"),
			InbuiltFunction::Fract => write!(f, "fract"),
			InbuiltFunction::Frexp => write!(f, "frexp"),
			InbuiltFunction::InsertBits => write!(f, "insertBits"),
			InbuiltFunction::InverseSqrt => write!(f, "inverseSqrt"),
			InbuiltFunction::Ldexp => write!(f, "ldexp"),
			InbuiltFunction::Length => write!(f, "length"),
			InbuiltFunction::Log => write!(f, "log"),
			InbuiltFunction::Log2 => write!(f, "log2"),
			InbuiltFunction::Max => write!(f, "max"),
			InbuiltFunction::Min => write!(f, "min"),
			InbuiltFunction::Mix => write!(f, "mix"),
			InbuiltFunction::Modf => write!(f, "modf"),
			InbuiltFunction::Normalize => write!(f, "normalize"),
			InbuiltFunction::Pow => write!(f, "pow"),
			InbuiltFunction::QuantizeToF16 => write!(f, "quantizeToF16"),
			InbuiltFunction::Radians => write!(f, "radians"),
			InbuiltFunction::Reflect => write!(f, "reflect"),
			InbuiltFunction::Refract => write!(f, "refract"),
			InbuiltFunction::ReverseBits => write!(f, "reverseBits"),
			InbuiltFunction::Round => write!(f, "round"),
			InbuiltFunction::Saturate => write!(f, "saturate"),
			InbuiltFunction::Sign => write!(f, "sign"),
			InbuiltFunction::Sin => write!(f, "sin"),
			InbuiltFunction::Sinh => write!(f, "sinh"),
			InbuiltFunction::Smoothstep => write!(f, "smoothStep"),
			InbuiltFunction::Sqrt => write!(f, "sqrt"),
			InbuiltFunction::Step => write!(f, "step"),
			InbuiltFunction::Tan => write!(f, "tan"),
			InbuiltFunction::Tanh => write!(f, "tanh"),
			InbuiltFunction::Transpose => write!(f, "transpose"),
			InbuiltFunction::Trunc => write!(f, "trunc"),
			InbuiltFunction::TextureSample => write!(f, "textureSample"),
			InbuiltFunction::TextureSampleBias => write!(f, "textureSampleBias"),
			InbuiltFunction::TextureSampleCompare => write!(f, "textureSampleCompare"),
			InbuiltFunction::TextureSampleGrad => write!(f, "textureSampleGrad"),
			InbuiltFunction::TextureSampleLevel => write!(f, "textureSampleLevel"),
			InbuiltFunction::Dpdx => write!(f, "dpdx"),
			InbuiltFunction::DpdxCoarse => write!(f, "dpdxCoarse"),
			InbuiltFunction::DpdxFine => write!(f, "dpdxFine"),
			InbuiltFunction::Dpdy => write!(f, "dpdy"),
			InbuiltFunction::DpdyCoarse => write!(f, "dpdyCoarse"),
			InbuiltFunction::DpdyFine => write!(f, "dpdyFine"),
			InbuiltFunction::Fwidth => write!(f, "fwidth"),
			InbuiltFunction::FwidthCoarse => write!(f, "fwidthCoarse"),
			InbuiltFunction::FwidthFine => write!(f, "fwidthFine"),
			InbuiltFunction::TextureDimensions => write!(f, "textureDimensions"),
			InbuiltFunction::TextureGather => write!(f, "textureGather"),
			InbuiltFunction::TextureGatherCompare => write!(f, "textureGatherCompare"),
			InbuiltFunction::TextureLoad => write!(f, "textureLoad"),
			InbuiltFunction::TextureNumLayers => write!(f, "textureNumLayers"),
			InbuiltFunction::TextuerNumLevels => write!(f, "textureNumLevels"),
			InbuiltFunction::TextureNumSamples => write!(f, "textureNumSamples"),
			InbuiltFunction::TextureSampleCompareLevel => write!(f, "textureSampleCompareLevel"),
			InbuiltFunction::TextureSampleBaseClampToEdge => write!(f, "textureSampleBaseClampToEdge"),
			InbuiltFunction::TextureStore => write!(f, "textureStore"),
			InbuiltFunction::AtomicLoad => write!(f, "atomicLoad"),
			InbuiltFunction::AtomicStore => write!(f, "atomicStore"),
			InbuiltFunction::AtomicAdd => write!(f, "atomicAdd"),
			InbuiltFunction::AtomicSub => write!(f, "atomicSub"),
			InbuiltFunction::AtomicMax => write!(f, "atomicMax"),
			InbuiltFunction::AtomicMin => write!(f, "atomicMin"),
			InbuiltFunction::AtomicAnd => write!(f, "atomicAnd"),
			InbuiltFunction::AtomicOr => write!(f, "atomicOr"),
			InbuiltFunction::AtomicXor => write!(f, "atomicXor"),
			InbuiltFunction::AtomicExchange => write!(f, "atomicExchange"),
			InbuiltFunction::AtomicCompareExchangeWeak => write!(f, "atomic_compare_exchange_weak"),
			InbuiltFunction::Pack4x8Snorm => write!(f, "pack4x8snorm"),
			InbuiltFunction::Pack4x8Unorm => write!(f, "pack4x8unorm"),
			InbuiltFunction::Pack2x16Snorm => write!(f, "pack2x16snorm"),
			InbuiltFunction::Pack2x16Unorm => write!(f, "pack2x16unorm"),
			InbuiltFunction::Pack2x16Float => write!(f, "pack2x16float"),
			InbuiltFunction::Unpack4x8Snorm => write!(f, "unpack4x8snorm"),
			InbuiltFunction::Unpack4x8Unorm => write!(f, "unpack4x8unorm"),
			InbuiltFunction::Unpack2x16Snorm => write!(f, "unpack2x16snorm"),
			InbuiltFunction::Unpack2x16Unorm => write!(f, "unpack2x16unorm"),
			InbuiltFunction::Unpack2x16Float => write!(f, "unpack2x16float"),
			InbuiltFunction::StorageBarrier => write!(f, "storageBarrier"),
			InbuiltFunction::WorkgroupBarrier => write!(f, "workgroupBarrier"),
		}
	}
}

pub struct InbuiltFunctionKws {
	pub bitcast: Text,
	pub all: Text,
	pub any: Text,
	pub select: Text,
	pub array_length: Text,
	pub abs: Text,
	pub acos: Text,
	pub acosh: Text,
	pub asin: Text,
	pub asinh: Text,
	pub atan: Text,
	pub atanh: Text,
	pub atan2: Text,
	pub ceil: Text,
	pub clamp: Text,
	pub cos: Text,
	pub cosh: Text,
	pub count_leading_zeros: Text,
	pub count_one_bits: Text,
	pub count_trailing_zeros: Text,
	pub cross: Text,
	pub degrees: Text,
	pub determinant: Text,
	pub distance: Text,
	pub dot: Text,
	pub exp: Text,
	pub exp2: Text,
	pub extract_bits: Text,
	pub face_forward: Text,
	pub first_leading_bit: Text,
	pub first_trailing_bit: Text,
	pub floor: Text,
	pub fma: Text,
	pub fract: Text,
	pub frexp: Text,
	pub insert_bits: Text,
	pub inverse_sqrt: Text,
	pub ldexp: Text,
	pub length: Text,
	pub log: Text,
	pub log2: Text,
	pub max: Text,
	pub min: Text,
	pub mix: Text,
	pub modf: Text,
	pub normalize: Text,
	pub pow: Text,
	pub quantize_to_f16: Text,
	pub radians: Text,
	pub reflect: Text,
	pub refract: Text,
	pub reverse_bits: Text,
	pub round: Text,
	pub saturate: Text,
	pub sign: Text,
	pub sin: Text,
	pub sinh: Text,
	pub smooth_step: Text,
	pub sqrt: Text,
	pub step: Text,
	pub tan: Text,
	pub tanh: Text,
	pub transpose: Text,
	pub trunc: Text,
	pub texture_sample: Text,
	pub texture_sample_bias: Text,
	pub texture_sample_compare: Text,
	pub texture_sample_grad: Text,
	pub texture_sample_level: Text,
	pub dpdx: Text,
	pub dpdx_coarse: Text,
	pub dpdx_fine: Text,
	pub dpdy: Text,
	pub dpdy_coarse: Text,
	pub dpdy_fine: Text,
	pub fwidth: Text,
	pub fwidth_coarse: Text,
	pub fwidth_fine: Text,
	pub texture_dimensions: Text,
	pub texture_gather: Text,
	pub texture_gather_compare: Text,
	pub texture_load: Text,
	pub texture_num_layers: Text,
	pub texture_num_levels: Text,
	pub texture_num_samples: Text,
	pub texture_sample_compare_level: Text,
	pub texture_sample_base_clamp_to_edge: Text,
	pub texture_store: Text,
	pub atomic_load: Text,
	pub atomic_store: Text,
	pub atomic_add: Text,
	pub atomic_sub: Text,
	pub atomic_max: Text,
	pub atomic_min: Text,
	pub atomic_and: Text,
	pub atomic_or: Text,
	pub atomic_xor: Text,
	pub atomic_exchange: Text,
	pub atomic_compare_exchange_weak: Text,
	pub pack4x8snorm: Text,
	pub pack4x8unorm: Text,
	pub pack2x16snorm: Text,
	pub pack2x16unorm: Text,
	pub pack2x16float: Text,
	pub unpack4x8snorm: Text,
	pub unpack4x8unorm: Text,
	pub unpack2x16snorm: Text,
	pub unpack2x16unorm: Text,
	pub unpack2x16float: Text,
	pub storage_barrier: Text,
	pub workgroup_barrier: Text,
}

impl InbuiltFunctionKws {
	pub fn init(intern: &mut Interner) -> Self {
		Self {
			bitcast: intern.get_static("bitcast"),
			all: intern.get_static("all"),
			any: intern.get_static("any"),
			select: intern.get_static("select"),
			array_length: intern.get_static("arrayLength"),
			abs: intern.get_static("abs"),
			acos: intern.get_static("acos"),
			acosh: intern.get_static("acosh"),
			asin: intern.get_static("asin"),
			asinh: intern.get_static("asinh"),
			atan: intern.get_static("atan"),
			atanh: intern.get_static("atanh"),
			atan2: intern.get_static("atan2"),
			ceil: intern.get_static("ceil"),
			clamp: intern.get_static("clamp"),
			cos: intern.get_static("cos"),
			cosh: intern.get_static("cosh"),
			count_leading_zeros: intern.get_static("countLeadingZeros"),
			count_one_bits: intern.get_static("countOneBits"),
			count_trailing_zeros: intern.get_static("countTrailingZeros"),
			cross: intern.get_static("cross"),
			degrees: intern.get_static("degrees"),
			determinant: intern.get_static("determinant"),
			distance: intern.get_static("distance"),
			dot: intern.get_static("dot"),
			exp: intern.get_static("exp"),
			exp2: intern.get_static("exp2"),
			extract_bits: intern.get_static("extractBits"),
			face_forward: intern.get_static("faceForward"),
			first_leading_bit: intern.get_static("firstLeadingBit"),
			first_trailing_bit: intern.get_static("firstTrailingBit"),
			floor: intern.get_static("floor"),
			fma: intern.get_static("fma"),
			fract: intern.get_static("fract"),
			frexp: intern.get_static("frexp"),
			insert_bits: intern.get_static("insertBits"),
			inverse_sqrt: intern.get_static("inverseSqrt"),
			ldexp: intern.get_static("ldexp"),
			length: intern.get_static("length"),
			log: intern.get_static("log"),
			log2: intern.get_static("log2"),
			max: intern.get_static("max"),
			min: intern.get_static("min"),
			mix: intern.get_static("mix"),
			modf: intern.get_static("modf"),
			normalize: intern.get_static("normalize"),
			pow: intern.get_static("pow"),
			quantize_to_f16: intern.get_static("quantizeToF16"),
			radians: intern.get_static("radians"),
			reflect: intern.get_static("reflect"),
			refract: intern.get_static("refract"),
			reverse_bits: intern.get_static("reverseBits"),
			round: intern.get_static("round"),
			saturate: intern.get_static("saturate"),
			sign: intern.get_static("sign"),
			sin: intern.get_static("sin"),
			sinh: intern.get_static("sinh"),
			smooth_step: intern.get_static("smoothStep"),
			sqrt: intern.get_static("sqrt"),
			step: intern.get_static("step"),
			tan: intern.get_static("tan"),
			tanh: intern.get_static("tanh"),
			transpose: intern.get_static("transpose"),
			trunc: intern.get_static("trunc"),
			texture_sample: intern.get_static("textureSample"),
			texture_sample_bias: intern.get_static("textureSampleBias"),
			texture_sample_compare: intern.get_static("textureSampleCompare"),
			texture_sample_grad: intern.get_static("textureSampleGrad"),
			texture_sample_level: intern.get_static("textureSampleLevel"),
			dpdx: intern.get_static("dpdx"),
			dpdx_coarse: intern.get_static("dpdxCoarse"),
			dpdx_fine: intern.get_static("dpdxFine"),
			dpdy: intern.get_static("dpdy"),
			dpdy_coarse: intern.get_static("dpdyCoarse"),
			dpdy_fine: intern.get_static("dpdyFine"),
			fwidth: intern.get_static("fwidth"),
			fwidth_coarse: intern.get_static("fwidthCoarse"),
			fwidth_fine: intern.get_static("fwidthFine"),
			texture_dimensions: intern.get_static("textureDimensions"),
			texture_gather: intern.get_static("textureGather"),
			texture_gather_compare: intern.get_static("textureGatherCompare"),
			texture_load: intern.get_static("textureLoad"),
			texture_num_layers: intern.get_static("textureNumLayers"),
			texture_num_levels: intern.get_static("textureNumLevels"),
			texture_num_samples: intern.get_static("textureNumSamples"),
			texture_sample_compare_level: intern.get_static("textureSampleCompareLevel"),
			texture_sample_base_clamp_to_edge: intern.get_static("textureSampleBaseClampToEdge"),
			texture_store: intern.get_static("textureStore"),
			atomic_load: intern.get_static("atomicLoad"),
			atomic_store: intern.get_static("atomicStore"),
			atomic_add: intern.get_static("atomicAdd"),
			atomic_sub: intern.get_static("atomicSub"),
			atomic_min: intern.get_static("atomicMin"),
			atomic_max: intern.get_static("atomicMax"),
			atomic_and: intern.get_static("atomicAnd"),
			atomic_or: intern.get_static("atomicOr"),
			atomic_xor: intern.get_static("atomicXor"),
			atomic_exchange: intern.get_static("atomicExchange"),
			atomic_compare_exchange_weak: intern.get_static("atomicCompareExchangeWeak"),
			pack4x8snorm: intern.get_static("pack4x8snorm"),
			pack4x8unorm: intern.get_static("pack4x8unorm"),
			pack2x16snorm: intern.get_static("pack2x16snorm"),
			pack2x16unorm: intern.get_static("pack2x16unorm"),
			pack2x16float: intern.get_static("pack2x16float"),
			unpack4x8snorm: intern.get_static("unpack4x8snorm"),
			unpack4x8unorm: intern.get_static("unpack4x8unorm"),
			unpack2x16snorm: intern.get_static("unpack2x16snorm"),
			unpack2x16unorm: intern.get_static("unpack2x16unorm"),
			unpack2x16float: intern.get_static("unpack2x16float"),
			storage_barrier: intern.get_static("storageBarrier"),
			workgroup_barrier: intern.get_static("workgroupBarrier"),
		}
	}
}
